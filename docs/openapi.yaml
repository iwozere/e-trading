openapi: 3.0.0
info:
  title: Trading Bot Management API
  version: 1.1.0
  description: |
    Unified REST API for managing trading bots. Used by both api.py (REST) and webgui/app.py (Web GUI).
    
    - api.py uses HTTP Basic Auth
    - webgui/app.py uses session-based login (with secure session cookies: Secure, HttpOnly, SameSite=Lax)
    - Version: 1.1.0
    
    New endpoints:
      - /api/health (no auth, returns {status: ok})
      - /api/health/full (detailed, requires login)
      - /api/bot-types (GET, returns list of available bot types)
servers:
  - url: http://localhost:5000

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    BotConfig:
      type: object
      properties:
        strategy:
          type: string
        id:
          type: string
        config:
          type: object
          additionalProperties: true
    BotStatus:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        active_positions:
          type: integer
        portfolio_value:
          type: number
    Trade:
      type: object
      properties:
        bot_id:
          type: integer
        pair:
          type: string
        type:
          type: string
        entry_price:
          type: number
        exit_price:
          type: number
        size:
          type: number
        pl:
          type: number
        time:
          type: string
          format: date-time
    Log:
      type: object
      properties:
        log:
          type: string
    BacktestRequest:
      type: object
      properties:
        strategy:
          type: string
        ticker:
          type: string
        tf:
          type: string
    BacktestResponse:
      type: object
      properties:
        message:
          type: string
    Health:
      type: object
      properties:
        status:
          type: string
    HealthFull:
      type: object
      properties:
        flask:
          type: string
        disk:
          type: object
        memory:
          type: object
        cpu:
          type: object
        hostname:
          type: string
        binance:
          type: string
    BotTypes:
      type: object
      properties:
        bot_types:
          type: array
          items:
            type: string

security:
  - basicAuth: []

paths:
  /start_bot:
    post:
      summary: Start a trading bot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotConfig'
      responses:
        '200':
          description: Bot started
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  bot_id:
                    type: string
        '400':
          description: Missing or invalid parameters
        '500':
          description: Failed to start bot
  /stop_bot:
    post:
      summary: Stop a trading bot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bot_id:
                  type: string
      responses:
        '200':
          description: Bot stopped
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing bot_id
        '500':
          description: Failed to stop bot
  /status:
    get:
      summary: Get status of all running bots
      responses:
        '200':
          description: Status of all bots
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /trades:
    get:
      summary: Get trade history for a bot
      parameters:
        - in: query
          name: bot_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Trade history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
        '400':
          description: Missing bot_id
  /log:
    get:
      summary: Get last 20 log lines for a strategy
      parameters:
        - in: query
          name: strategy
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Log lines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: Missing strategy
        '404':
          description: Log file not found
  /backtest:
    post:
      summary: Run a backtest for a strategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BacktestRequest'
      responses:
        '200':
          description: Backtest started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestResponse'
        '400':
          description: Missing or invalid parameters

# Additional endpoints for webgui/app.py only
  /api/bots:
    get:
      summary: Get status of all running bots (webgui)
      responses:
        '200':
          description: List of bot statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BotStatus'
    post:
      summary: Start a trading bot (webgui)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotConfig'
      responses:
        '200':
          description: Bot started
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  bot_id:
                    type: string
        '400':
          description: Missing or invalid parameters
        '500':
          description: Failed to start bot
  /api/bots/{bot_id}:
    delete:
      summary: Stop a trading bot (webgui)
      parameters:
        - in: path
          name: bot_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Bot stopped
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '404':
          description: Bot not found
  /api/bots/{bot_id}/trades:
    get:
      summary: Get trade history for a bot (webgui)
      parameters:
        - in: path
          name: bot_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Trade history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
  /api/config/bots:
    get:
      summary: List available bot configs (webgui)
      responses:
        '200':
          description: List of bot configs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/config/bots/{bot_id}:
    get:
      summary: Get config for a bot (webgui)
      parameters:
        - in: path
          name: bot_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Bot config
          content:
            application/json:
              schema:
                type: object
    post:
      summary: Save config for a bot (webgui)
      parameters:
        - in: path
          name: bot_id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Config saved
          content:
            application/json:
              schema:
                type: object
  /api/config/bots/{bot_id}/parameters:
    get:
      summary: Get parameter template for a bot type (webgui)
      parameters:
        - in: path
          name: bot_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Parameter template
          content:
            application/json:
              schema:
                type: object
  /api/config/bots/{bot_id}/archive:
    get:
      summary: Get archived configs for a bot (webgui)
      parameters:
        - in: path
          name: bot_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Archived configs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /api/health:
    get:
      summary: Simple health check (no auth)
      responses:
        '200':
          description: Health OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
              example:
                status: ok
  /api/health/full:
    get:
      summary: Detailed health check (requires login)
      security: []
      responses:
        '200':
          description: Detailed health info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthFull'
  /api/bot-types:
    get:
      summary: List available bot types
      responses:
        '200':
          description: List of bot types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotTypes'
              example:
                bot_types: [bb_volume_supertrend, rsi_bb_volume, ichimoku_rsi_atr_volume] 